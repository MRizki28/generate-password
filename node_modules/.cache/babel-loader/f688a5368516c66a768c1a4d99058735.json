{"ast":null,"code":"var crypto = require('crypto');\nconst RANDOM_BATCH_SIZE = 256;\nvar randomIndex;\nvar randomBytes;\nvar getNextRandomValue = function () {\n  if (randomIndex === undefined || randomIndex >= randomBytes.length) {\n    randomIndex = 0;\n    randomBytes = crypto.randomBytes(RANDOM_BATCH_SIZE);\n  }\n  var result = randomBytes[randomIndex];\n  randomIndex += 1;\n  return result;\n};\n\n// Generates a random number\nvar randomNumber = function (max) {\n  // gives a number between 0 (inclusive) and max (exclusive)\n  var rand = getNextRandomValue();\n  while (rand >= 256 - 256 % max) {\n    rand = getNextRandomValue();\n  }\n  return rand % max;\n};\n\n// Possible combinations\nvar lowercase = 'abcdefghijklmnopqrstuvwxyz',\n  uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  numbers = '0123456789',\n  symbols = '!@#$%^&*()+_-=}{[]|:;\"/?.><,`~',\n  similarCharacters = /[ilLI|`oO0]/g,\n  strictRules = [{\n    name: 'lowercase',\n    rule: /[a-z]/\n  }, {\n    name: 'uppercase',\n    rule: /[A-Z]/\n  }, {\n    name: 'numbers',\n    rule: /[0-9]/\n  }, {\n    name: 'symbols',\n    rule: /[!@#$%^&*()+_\\-=}{[\\]|:;\"/?.><,`~]/\n  }];\nvar generate = function (options, pool) {\n  var password = '',\n    optionsLength = options.length,\n    poolLength = pool.length;\n  for (var i = 0; i < optionsLength; i++) {\n    password += pool[randomNumber(poolLength)];\n  }\n  if (options.strict) {\n    // Iterate over each rule, checking to see if the password works.\n    var fitsRules = strictRules.every(function (rule) {\n      // If the option is not checked, ignore it.\n      if (options[rule.name] == false) return true;\n\n      // Treat symbol differently if explicit string is provided\n      if (rule.name === 'symbols' && typeof options[rule.name] === 'string') {\n        // Create a regular expression from the provided symbols\n        var re = new RegExp('[' + options[rule.name] + ']');\n        return re.test(password);\n      }\n\n      // Run the regex on the password and return whether\n      // or not it matches.\n      return rule.rule.test(password);\n    });\n\n    // If it doesn't fit the rules, generate a new one (recursion).\n    if (!fitsRules) return generate(options, pool);\n  }\n  return password;\n};\n\n// Generate a random password.\nmodule.exports.generate = function (options) {\n  // Set defaults.\n  options = options || {};\n  if (!Object.prototype.hasOwnProperty.call(options, 'length')) options.length = 10;\n  if (!Object.prototype.hasOwnProperty.call(options, 'numbers')) options.numbers = false;\n  if (!Object.prototype.hasOwnProperty.call(options, 'symbols')) options.symbols = false;\n  if (!Object.prototype.hasOwnProperty.call(options, 'exclude')) options.exclude = '';\n  if (!Object.prototype.hasOwnProperty.call(options, 'uppercase')) options.uppercase = true;\n  if (!Object.prototype.hasOwnProperty.call(options, 'lowercase')) options.lowercase = true;\n  if (!Object.prototype.hasOwnProperty.call(options, 'excludeSimilarCharacters')) options.excludeSimilarCharacters = false;\n  if (!Object.prototype.hasOwnProperty.call(options, 'strict')) options.strict = false;\n  if (options.strict) {\n    var minStrictLength = 1 + (options.numbers ? 1 : 0) + (options.symbols ? 1 : 0) + (options.uppercase ? 1 : 0);\n    if (minStrictLength > options.length) {\n      throw new TypeError('Length must correlate with strict guidelines');\n    }\n  }\n\n  // Generate character pool\n  var pool = '';\n\n  // lowercase\n  if (options.lowercase) {\n    pool += lowercase;\n  }\n\n  // uppercase\n  if (options.uppercase) {\n    pool += uppercase;\n  }\n  // numbers\n  if (options.numbers) {\n    pool += numbers;\n  }\n  // symbols\n  if (options.symbols) {\n    if (typeof options.symbols === 'string') {\n      pool += options.symbols;\n    } else {\n      pool += symbols;\n    }\n  }\n\n  // Throw error if pool is empty.\n  if (!pool) {\n    throw new TypeError('At least one rule for pools must be true');\n  }\n\n  // similar characters\n  if (options.excludeSimilarCharacters) {\n    pool = pool.replace(similarCharacters, '');\n  }\n\n  // excludes characters from the pool\n  var i = options.exclude.length;\n  while (i--) {\n    pool = pool.replace(options.exclude[i], '');\n  }\n  var password = generate(options, pool);\n  return password;\n};\n\n// Generates multiple passwords at once with the same options.\nmodule.exports.generateMultiple = function (amount, options) {\n  var passwords = [];\n  for (var i = 0; i < amount; i++) {\n    passwords[i] = module.exports.generate(options);\n  }\n  return passwords;\n};","map":{"version":3,"names":["crypto","require","RANDOM_BATCH_SIZE","randomIndex","randomBytes","getNextRandomValue","undefined","length","result","randomNumber","max","rand","lowercase","uppercase","numbers","symbols","similarCharacters","strictRules","name","rule","generate","options","pool","password","optionsLength","poolLength","i","strict","fitsRules","every","re","RegExp","test","module","exports","Object","prototype","hasOwnProperty","call","exclude","excludeSimilarCharacters","minStrictLength","TypeError","replace","generateMultiple","amount","passwords"],"sources":["C:/Users/muham/Downloads/Compressed/generate-random-password-react-master/node_modules/generate-password/src/generate.js"],"sourcesContent":["var crypto = require('crypto');\n\nconst RANDOM_BATCH_SIZE = 256;\n\nvar randomIndex;\nvar randomBytes;\n\nvar getNextRandomValue = function() {\n\tif (randomIndex === undefined || randomIndex >= randomBytes.length) {\n\t\trandomIndex = 0;\n\t\trandomBytes = crypto.randomBytes(RANDOM_BATCH_SIZE);\n\t}\n\n\tvar result = randomBytes[randomIndex];\n\trandomIndex += 1;\n\n\treturn result;\n};\n\n// Generates a random number\nvar randomNumber = function(max) {\n\t// gives a number between 0 (inclusive) and max (exclusive)\n\tvar rand = getNextRandomValue();\n\twhile (rand >= 256 - (256 % max)) {\n\t\trand = getNextRandomValue();\n\t}\n\treturn rand % max;\n};\n\n// Possible combinations\nvar lowercase = 'abcdefghijklmnopqrstuvwxyz',\n\tuppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\tnumbers = '0123456789',\n\tsymbols = '!@#$%^&*()+_-=}{[]|:;\"/?.><,`~',\n\tsimilarCharacters = /[ilLI|`oO0]/g,\n\tstrictRules = [\n\t\t{ name: 'lowercase', rule: /[a-z]/ },\n\t\t{ name: 'uppercase', rule: /[A-Z]/ },\n\t\t{ name: 'numbers', rule: /[0-9]/ },\n\t\t{ name: 'symbols', rule: /[!@#$%^&*()+_\\-=}{[\\]|:;\"/?.><,`~]/ }\n\t];\n\nvar generate = function(options, pool) {\n\tvar password = '',\n\t\toptionsLength = options.length,\n\t\tpoolLength = pool.length;\n\n\tfor (var i = 0; i < optionsLength; i++) {\n\t\tpassword += pool[randomNumber(poolLength)];\n\t}\n\n\tif (options.strict) {\n\t\t// Iterate over each rule, checking to see if the password works.\n\t\tvar fitsRules = strictRules.every(function(rule) {\n\t\t\t// If the option is not checked, ignore it.\n\t\t\tif (options[rule.name] == false) return true;\n\n\t\t\t// Treat symbol differently if explicit string is provided\n\t\t\tif (rule.name === 'symbols' && typeof options[rule.name] === 'string') {\n\t\t\t\t// Create a regular expression from the provided symbols\n\t\t\t\tvar re = new RegExp('['+options[rule.name]+']');\n\t\t\t\treturn re.test(password);\n\t\t\t}\n\n\t\t\t// Run the regex on the password and return whether\n\t\t\t// or not it matches.\n\t\t\treturn rule.rule.test(password);\n\t\t});\n\n\t\t// If it doesn't fit the rules, generate a new one (recursion).\n\t\tif (!fitsRules) return generate(options, pool);\n\t}\n\n\treturn password;\n};\n\n// Generate a random password.\nmodule.exports.generate = function(options) {\n\t// Set defaults.\n\toptions = options || {};\n\tif (!Object.prototype.hasOwnProperty.call(options, 'length')) options.length = 10;\n\tif (!Object.prototype.hasOwnProperty.call(options, 'numbers')) options.numbers = false;\n\tif (!Object.prototype.hasOwnProperty.call(options, 'symbols')) options.symbols = false;\n\tif (!Object.prototype.hasOwnProperty.call(options, 'exclude')) options.exclude = '';\n\tif (!Object.prototype.hasOwnProperty.call(options, 'uppercase')) options.uppercase = true;\n\tif (!Object.prototype.hasOwnProperty.call(options, 'lowercase')) options.lowercase = true;\n\tif (!Object.prototype.hasOwnProperty.call(options, 'excludeSimilarCharacters')) options.excludeSimilarCharacters = false;\n\tif (!Object.prototype.hasOwnProperty.call(options, 'strict')) options.strict = false;\n\n\tif (options.strict) {\n\t\tvar minStrictLength = 1 + (options.numbers ? 1 : 0) + (options.symbols ? 1 : 0) + (options.uppercase ? 1 : 0);\n\t\tif (minStrictLength > options.length) {\n\t\t\tthrow new TypeError('Length must correlate with strict guidelines');\n\t\t}\n\t}\n\n\t// Generate character pool\n\tvar pool = '';\n\n\t// lowercase\n\tif (options.lowercase) {\n\t\tpool += lowercase;\n\t}\n\n\t// uppercase\n\tif (options.uppercase) {\n\t\tpool += uppercase;\n\t}\n\t// numbers\n\tif (options.numbers) {\n\t\tpool += numbers;\n\t}\n\t// symbols\n\tif (options.symbols) {\n\t\tif (typeof options.symbols === 'string') {\n\t\t\tpool += options.symbols;\n\t\t} else {\n\t\t\tpool += symbols;\n\t\t}\n\t}\n\n\t// Throw error if pool is empty.\n\tif (!pool) {\n\t\tthrow new TypeError('At least one rule for pools must be true');\n\t}\n\n\t// similar characters\n\tif (options.excludeSimilarCharacters) {\n\t\tpool = pool.replace(similarCharacters, '');\n\t}\n\n\t// excludes characters from the pool\n\tvar i = options.exclude.length;\n\twhile (i--) {\n\t\tpool = pool.replace(options.exclude[i], '');\n\t}\n\n\tvar password = generate(options, pool);\n\n\treturn password;\n};\n\n// Generates multiple passwords at once with the same options.\nmodule.exports.generateMultiple = function(amount, options) {\n\tvar passwords = [];\n\n\tfor (var i = 0; i < amount; i++) {\n\t\tpasswords[i] = module.exports.generate(options);\n\t}\n\n\treturn passwords;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}